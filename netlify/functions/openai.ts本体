// netlify/functions/openai.ts
import OpenAI from 'openai';
import { Handler } from '@netlify/functions';
import * as dotenv from 'dotenv';
dotenv.config();

// OpenAI クライアント初期化
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,   // ← .env / Netlify 環境変数
});

const handler: Handler = async (event) => {
  // POST 以外は拒否
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: 'Method Not Allowed' };
  }

  try {
    /** -------------------------------------------------
     * 1. リクエストボディを取得 & バリデーション
     * ------------------------------------------------*/
    const body = JSON.parse(event.body || '{}');
    const messages = body.messages;

    // openai.ts の try 内で model も出力する
console.log("🌟 Using model: 'ft:gpt-3.5-turbo-1106:parsonal::BmZ5rsAl'"); // ← model 変数を log に出す


    // messages が配列でなければ 400
    if (!Array.isArray(messages)) {
      return {
        statusCode: 400,
        body: JSON.stringify({ message: 'messages が配列じゃないよ' }),
      };
    }

    /** -------------------------------------------------
     * 2. system メッセージを追加
     * ------------------------------------------------*/
    const messagesWithSystem = [
         ...messages,
    ];

    /** -------------------------------------------------
     * 3. OpenAI へリクエスト
     * ------------------------------------------------*/
    const completion = await openai.chat.completions.create({
<<<<<<< HEAD
      /**model: 'ft:gpt-3.5-turbo-1106:parsonal::BmZ5rsAl', // ← あなたの fine-tune モデル
      model: 'ft:gpt-3.5-turbo', // ← あなたの fine-tune モデル
=======
      model: 'ft:gpt-3.5-turbo-1106:parsonal::BmZ5rsAl', // ← あなたの fine-tune モデル
>>>>>>> master
      messages: messagesWithSystem,
      temperature: 0.6,
      max_tokens: 600,
    });

    const assistantMessage = completion.choices[0].message?.content ?? '';

    return {
      statusCode: 200,
      body: JSON.stringify({ message: assistantMessage }),
    };
  } catch (error: any) {
     console.error('🔥 GPT ERROR:', error); // ← これを追加！
    return {
      statusCode: 500,
      body: JSON.stringify({
        message: 'サーバーでエラーが発生しました。',
        error: error.message ?? 'Unknown error',
      }),
    };
  }
};

export { handler };
